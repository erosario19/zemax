import struct# Read Data from ZRD File# Written by Michael Cheng# Edited by Zach Derocher 10/2/17filepath=r'C:\\Users\\zachary.Derocher\\Documents\\Zemax\\Samples\\Non-sequential\\Sources\\Array of diodes.ZRD'bfile=open(filepath, 'rb')Version = int.from_bytes(bfile.read(4), byteorder='little')MaxSeg = int.from_bytes(bfile.read(4), byteorder='little')print(filepath)print('Version =       ' + str(Version))print('MaxSeg =        ' + str(MaxSeg))loops = 0while True:    Segs = int.from_bytes(bfile.read(4), byteorder='little')    print('\n\nSegs =          ' + str(Segs))    loops = loops + 1    if Segs == 0:        break        status = []    level = []    hit_object = []    hit_face = []    unused = []    in_object = []    parent = []    storage = []    xybin = []    lmbin = []    index = []    starting_phase = []    x = []    y = []    z = []    l = []    m = []    n = []    nx = []    ny = []    nz = []    path_to = []    intensity = []    phase_of = []    phase_at = []    exr = []    exi = []    eyr = []    eyi = []    ezr = []    ezi = []    for i in range(0,Segs,1):        status.append(int.from_bytes(bfile.read(4), byteorder='little'))        level.append(int.from_bytes(bfile.read(4), byteorder='little'))        hit_object.append(int.from_bytes(bfile.read(4), byteorder='little'))        hit_face.append(int.from_bytes(bfile.read(4), byteorder='little'))        unused.append(int.from_bytes(bfile.read(4), byteorder='little'))        in_object.append(int.from_bytes(bfile.read(4), byteorder='little'))        parent.append(int.from_bytes(bfile.read(4), byteorder='little'))        storage.append(int.from_bytes(bfile.read(4), byteorder='little'))        xybin.append(int.from_bytes(bfile.read(4), byteorder='little'))        lmbin.append(int.from_bytes(bfile.read(4), byteorder='little'))        index.append(struct.unpack('d', bfile.read(8))[0])        starting_phase.append(struct.unpack('d', bfile.read(8))[0])        x.append(struct.unpack('d', bfile.read(8))[0])        y.append(struct.unpack('d', bfile.read(8))[0])        z.append(struct.unpack('d', bfile.read(8))[0])        l.append(struct.unpack('d', bfile.read(8))[0])        m.append(struct.unpack('d', bfile.read(8))[0])        n.append(struct.unpack('d', bfile.read(8))[0])        nx.append(struct.unpack('d', bfile.read(8))[0])        ny.append(struct.unpack('d', bfile.read(8))[0])        nz.append(struct.unpack('d', bfile.read(8))[0])        path_to.append(struct.unpack('d', bfile.read(8))[0])        intensity.append(struct.unpack('d', bfile.read(8))[0])        phase_of.append(struct.unpack('d', bfile.read(8))[0])        phase_at.append(struct.unpack('d', bfile.read(8))[0])        exr.append(struct.unpack('d', bfile.read(8))[0])        exi.append(struct.unpack('d', bfile.read(8))[0])        eyr.append(struct.unpack('d', bfile.read(8))[0])        eyi.append(struct.unpack('d', bfile.read(8))[0])        ezr.append(struct.unpack('d', bfile.read(8))[0])        ezi.append(struct.unpack('d', bfile.read(8))[0])    print('status =        ' + str(status))    print('level =         ' + str(level))    print('hit_object =    ' + str(hit_object))    print('hit_face =      ' + str(hit_face))    print('in_object =     ' + str(in_object))    print('parent =        ' + str(parent))    print('storage =       ' + str(storage))    print('xybin =         ' + str(xybin))    print('lmbin =         ' + str(lmbin))    print('index =         ' + str(index))    print('starting_phase =' + str(starting_phase))    print('x =             ' + str(x))    print('y =             ' + str(y))    print('z =             ' + str(z))    print('l =             ' + str(l))    print('m =             ' + str(m))    print('n =             ' + str(n))    print('nx =            ' + str(nx))    print('ny =            ' + str(ny))    print('nz =            ' + str(nz))    print('path_to =       ' + str(path_to))    print('intensity =     ' + str(intensity))    print('phase_of =      ' + str(phase_of))    print('phase_at =      ' + str(phase_at))